//+++++++++++++++++++++++++++++++++++++++++++++++++++++
// File automatically generated by Xfuzzy - DO NOT EDIT
//+++++++++++++++++++++++++++++++++++++++++++++++++++++

package pkg;

import xfuzzy.lang.*;

public class xfl_defuz_WeightedFuzzyMean extends DefuzMethod {
 public xfl_defuz_WeightedFuzzyMean() {
   super("xfl","WeightedFuzzyMean");
   Parameter single[] = new Parameter[0];
   setSingleParameters(single);
  }

 public double compute(AggregateMemFunc mf) {
   double min = mf.min();
   double max = mf.max();
  double num=0, denom=0;
  for(int i=0; i<mf.conc.length; i++) {
   num += mf.conc[i].degree()*mf.conc[i].basis()*mf.conc[i].center();
   denom += mf.conc[i].degree()*mf.conc[i].basis();
  }
  if(denom==0) return (min+max)/2;
  return num/denom;
  }

 public boolean test () {
   return true;
  }

 public boolean test(AggregateMemFunc mf) {
   for(int i=0; i<mf.conc.length; i++) {
     LinguisticLabel pmf = mf.conc[i].getMF();
     if(!(pmf instanceof pkg.xfl_mf_triangle)
       && !(pmf instanceof pkg.xfl_mf_isosceles)
       && !(pmf instanceof pkg.xfl_mf_trapezoid)
       && !(pmf instanceof pkg.xfl_mf_bell)
       && !(pmf instanceof pkg.xfl_mf_rectangle)
       ) return false;
    }
   return true;
  }

 public String getJavaCode() {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += "     double num=0, denom=0;"+eol;
   code += "     for(int i=0; i<mf.conc.length; i++) {"+eol;
   code += "      num += mf.conc[i].degree()*mf.conc[i].basis()*mf.conc[i].center();"+eol;
   code += "      denom += mf.conc[i].degree()*mf.conc[i].basis();"+eol;
   code += "     }"+eol;
   code += "     if(denom==0) return (min+max)/2;"+eol;
   code += "     return num/denom;"+eol;
   return code;
  }

 public String getCCode() {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += "     double num=0, denom=0;"+eol;
   code += "     int i;"+eol;
   code += "     for(i=0; i<mf.length; i++) {"+eol;
   code += "      num += mf.degree[i]*basis(mf.conc[i])*center(mf.conc[i]);"+eol;
   code += "      denom += mf.degree[i]*basis(mf.conc[i]);"+eol;
   code += "     }"+eol;
   code += "     if(denom==0) return (min+max)/2;"+eol;
   code += "     return num/denom;"+eol;
   return code;
  }

 public String getCppCode() {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += "     double num=0, denom=0;"+eol;
   code += "     for(int i=0; i<mf.length; i++) {"+eol;
   code += "      num += mf.conc[i]->degree()*mf.conc[i]->basis()*mf.conc[i]->center();"+eol;
   code += "      denom += mf.conc[i]->degree()*mf.conc[i]->basis();"+eol;
   code += "     }"+eol;
   code += "     if(denom==0) return (min+max)/2;"+eol;
   code += "     return num/denom;"+eol;
   return code;
  }

//+++++++++++++++++++
 public void derivative(AggregateMemFunc mf, double derror) {
  double num=0, denom=0;
  for(int i=0; i<mf.conc.length; i++) {
   num += mf.conc[i].degree() * mf.conc[i].basis() * mf.conc[i].center();
   denom += mf.conc[i].degree() * mf.conc[i].basis();
  }
  double y = num/denom;
  for(int i=0; i<mf.conc.length; i++) {
   mf.conc[i].setDegreeDeriv(derror*mf.conc[i].basis()*(mf.conc[i].center()-y)/denom);
   mf.conc[i].setCenterDeriv(derror*mf.conc[i].degree()*mf.conc[i].basis()/denom);
   mf.conc[i].setBasisDeriv(derror*mf.conc[i].degree()*(mf.conc[i].center()-y)/denom);
  }
 }
//+++++++++++++++++++

}
